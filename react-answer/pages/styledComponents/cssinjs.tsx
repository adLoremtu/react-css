
import Head from 'next/head'
import PageLink from '../../components/pageLink'
import styled from 'styled-components'

/*
  問題1: Styled Componentsを用いて下記要素を定義してみてください。

  要素： p
  スタイル: color: red, font-size: 18px
  表示するテキスト: 問題1
  ※最初にstyled-componentsを読み込む必要があります。
*/
const Text = styled.p`
  color: red;
  font-size: 18px;
`

/*
  問題2: propsを利用して背景色を動的に変更するStyled Componentsを作成してみてください。

  要素: button
  Props名： bgColor(string)
  スタイル:
    display: block,
    width: 200px,
    height: 40px,
    color: #fff,
    margin: 0 auto;
    background-color: propsから取得
*/
type ButtonProps = {
  bgColor: string
}
const Button = styled.button`
  display: block;
  width: 200px;
  height: 40px;
  color: #fff;
  margin: 0 auto;
  background-color: ${(props: ButtonProps) => props.bgColor}
`

/*
  問題3: 問題1で作成したStyled Componentsを拡張して作成してみてください。

  要素: p
  追加スタイル: display: block, font-weight: bold, color: green;
*/
const ExtensionText = styled(Text)`
  display: block;
  font-weight: bold;
  color: green;
`

/*
  問題4: 問題3で作成したStyled Componentsをasを用いてspanタグに変換してみてください。

  要素： span
*/

/*
  問題5: attrsを用いてinputのtypeを動的に変更するStyled Componentsを作成してみてください

  要素： input
  属性指定: type(text, number, date) - 3つ作ります
  スタイル: display: block, width: 100px, margin: 0 auto;
*/
type InputProps = {
  type: string
}
const Input = styled.input.attrs((props: InputProps) => ({
  type: props.type
}))`
  display: block;
  width: 100px;
  margin: 0 auto;
`

export default function Home() {
  return (
    <>
      <Head>
        <title>react-css - CSS in JS</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageLink current="CSS in JS" />

      {/* 問題1 */}
      <Text>問題1</Text>

      {/* 問題2 */}
      <Button bgColor="#c00">問題2 bgColor: #c00</Button>
      <Button bgColor="#00c">問題2 bgColor: #00c</Button>

      {/* 問題3 */}
      <ExtensionText>問題3</ExtensionText>

      {/* 問題4 */}
      <ExtensionText as="span">問題4</ExtensionText>

      {/* 問題5 */}
      <Input type="text" />
      <Input type="number" />
      <Input type="date" />
    </>
  );
}



